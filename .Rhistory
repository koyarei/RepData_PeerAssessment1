notEmpty <- grep("\\w*", gdpByCountry[13])
notEmpty
gdpByCountry[13]
grep("Fiscal year", gdpByCountry[13])
gdpByCountry[13]
gdpByCountry[,13]
notEmpty <- grep("\\w*", gdpByCountry[,13])
notEmpty
gdpByCountry[notEmpty,13]
gdpByCountry[notEmpty]
gdpByCountry[notEmpty,]
notEmpty
notEmpty <- grep("fiscal year", gdpByCountry[,13])
notEmpty
gdpByCountry[notEmpty, 13]
gdpByCountry[notEmpty,]
notEmpty <- grep("[Ff]iscal year", gdpByCountry[,13])
notEmpty
gdpByCountry[notEmpty, 13]
endJune <- grep("Fiscal year end: June", gdpByCountry[notEmpty, 13])
endJune
length(endJ)
length(end)
length(endJune)
pattern <- "\w*"
pattern <- "\\w*"
grep(pattern, gdpByCountry[, 13])
Z <- stats::rnorm(10000)table(cut(Z, breaks = -6:6))
Z <- stats::rnorm(10000)
table(cut(Z, breaks = -6:6))
data1 <- c(3, 5 5, 5, 8, 11, 11, 11, 13)
data1 <- c(3, 5, 5, 5, 8, 11, 11, 11, 13)
data1
mean(data1)
sd(mean1)
sd(data1)
?sd
?nd
quantile(data1)
table(data1)
cut(data1, quantile(data1))
?chisq.test
survey
install.packages("MASS")
library(MASS)
head(survey)
sum(survey)
summary(survey)
nrow(survey)
?survey
hist(survey$Age)
hist(survey$Height)
tb1 <- table(survey$Smoke, survey$Exer)
tb1
chisq.test(tb1)
?dnorm
pnorm("0.042")
pnorm(0.042)
dnorm(0.042)
getwd()
setwd("/Users/Koya/R/repro-research-wk4")
setwd("/Users/Koya/R/repro-research-wk5")
getwd()
act <- read.csv("activity.csv")
head(act)
summary(ac)
summary(act)
tail(act)
nrow(act)
getwd()
setwd("/Users/Koya/R/repro-research-wk5/RepData-PeerAssignment1")
setwd("/Users/Koya/R/repro-research-wk5/RepData-PeerAssessment1")
setwd("/Users/Koya/R/repro-research-wk5/RepData_PeerAssessment1")
getwd()
unzip("activity.zip")
act <- read.csv("activity.csv")
tail(act)
head(act)
class(act$date)
summary(act$date)
summary(act)
table(act)
head(act)
table(act$date)
table(act$date, act$steps)
table(act$steps, act$date)
xtabs(steps ~ date, act)
head(act)
tapply(act$steps, act$date, sum)
class(tapply(act$steps, act$date, sum))
tapply(act$steps, act$date, sum)[1]
class(tapply(act$steps, act$date, sum)[1])
hist(tapply(act$steps, act$date, sum))
length(tapply(act$steps, act$date, sum))
stepsByDate <- tapply(act$steps, act$date, sum)
mean(stepsByDate)
median(stepsByDate)
head(act)
summary(act$interval)
boxplot(act$interval)
plot(act$interval, act$steps, type="l")
plot(act$interval, act$steps)
plot(act$interval, act$steps, type="l")
tapply(act$steps, act$interval, mean)
mean(tapply(act$steps, act$interval, mean))
max(tapply(act$steps, act$interval, mean))
tapply(act$steps, act$interval, mean)
head(act)
stepsByDate
is.na(stepsByDate)
bad <- is.na(stepsByDate)
bad
stepsByDate[!bad]
?formatC
act$interval
act$steps
is.na(act$steps)
act$steps[!is.na(act$steps)]
act$steps
act$steps[!is.na(act$steps)]
cleanSteps <- act$steps[!is.na(act$steps)]
tapply(cleanSteps, act$interval, mean)
tapply(act$steps, act$interval, sum)
badSteps <- is.na(act$steps)
badSteps
act$interval[!badSteps]
cleanSteps <- act$steps[!is.na(act$steps)]
cleanInterval <- act$interval[!is.na(act$steps)]
tapply(cleanSteps, cleanInterval, mean)
plot(tapply(cleanSteps, cleanInterval, mean))
plot(tapply(cleanSteps, cleanInterval, mean), type="l")
plot(tapply(cleanSteps, cleanInterval, mean), cleanInterval, type="l")
plot(cleanInterval, tapply(cleanSteps, cleanInterval, mean), type="l")
class(tapply(cleanSteps, cleanInterval, mean))
class(tapply(cleanSteps, cleanInterval, mean))[1]
tapply(cleanSteps, cleanInterval, mean)[1]
class(tapply(cleanSteps, cleanInterval, mean)[1])
meanSteps <- tapply(cleanSteps, cleanInterval, mean)
plot(cleanInterval, meanSteps)
data.frame(tapply(cleanSteps, cleanInterval, mean))
stepsByInterval <- data.frame(tapply(cleanSteps, cleanInterval, mean))
names(stepsByInterval) <- c("interval", "avg.steps")
ncol(stepsByInterval)
plot(stepsByInterval)
?strsplit
data.frame(strsplit(stepsByInterval, ""))
data.frame(strsplit(stepsByInterval, " "))
data.frame(strsplit(stepsByInterval, "\t"))
head(stepsByInterval)
names(stepsByInterval)
meanSteps <- data.frame(template=names(stepsByInterval), "avg.steps")
head(meanSteps)
meanSteps
stepsByInterval
?aggregate
aggregate(cleanSteps, cleanInterval, mean)
tapply(cleanSteps, cleanInterval, mean)
mean <- tapply(cleanSteps, cleanInterval, mean)
data.frame(template=names(mean), mean=mean)
head(data.frame(template=names(mean), mean=mean))
data.frame(template=names(mean), avg.steps)
data.frame(template=names(mean), "avg.steps"")
data.frame(template=names(mean), "avg.steps")
head(data.frame(template=names(mean), mean=mean))
head(data.frame(template=names(mean), avg.steps=mean))
head(data.frame(interval=names(mean), avg.steps=mean))
head(data.frame(interval, avg.steps=mean))
?data.frame
names(mean)
cleanSteps <- act$steps[!is.na(act$steps)]
cleanInterval <- act$interval[!is.na(act$steps)]
mean <- tapply(cleanSteps, cleanInterval, mean)
## create a data.frame based on the output of the tapply
stepsByInterval <- data.frame(interval=names(mean), avg.steps=mean)
head(stepsByInterval)
plot(stepsByInterval$avg.steps, stepsByInterval$interval, type="l", xlab="5-Minute Intervals", ylab="Steps", main="")
```
plot(stepsByInterval$interval, stepsByInterval$avg.steps, type="l", xlab="5-Minute Intervals", ylab="Steps", main="")
```
taiL(stepsByInterval)
tail(stepsByInterval)
class(stepsByInterval$interval)
class(stepsByInterval$avg.steps)
stepsByInterval$interval <- as.numeric(stepsByInterval$interval)
stepsByInterval$avg.steps <- as.numeric(stepsByInterval$avg.steps)
head(stepsByInterval)
class(stepsByInterval$interval)
stepsByInterval <- data.frame(interval=names(mean), avg.steps=mean)
stepsByInterval$interval <- as.numeric(as.character(stepsByInterval$interval)
stepsByInterval$avg.steps <- as.numeric(as.character(stepsByInterval$avg.steps))
stepsByInterval$interval <- as.numeric(as.character(stepsByInterval$interval))
stepsByInterval$avg.steps <- as.numeric(as.character(stepsByInterval$avg.steps))
head(stepsByInterval)
class(stepsByInterval$interval)
class(stepsByInterval$avg.steps)
plot(stepsByInterval$interval, stepsByInterval$avg.steps, type="l", xlab="5-Minute Intervals", ylab="Steps", main="")
```
max(stepsByInterval$avg.steps)
?maxn
?which.max
which.max(stepsByInterval$avg.steps)
max <- which.max(stepsByInterval$avg.steps)
stepsByInterval[max,1]
```
sum(is.na(act))
head(act)
act$date[is.na(act$date)]
?apply
apply(act, 2, sum)
apply(act, 2, is.na)
act[apply(act, 2, is.na)]
sum(is.na(act))
length(act[apply(act, 2, is.na)])
head(act)
sum(is.na(act$date))
sum(is.na(act$interval))
sum(is.na(act$steps))
head(mean)
stepsByInterval
head(stepsByInterval)
head(act)
naSub <- function(n) {
int <- act[n, "interval"]
meanSteps <- stepsByInterval[int, "avg.steps"]
return meanSteps
}
for (i in 1:nrow(act)) {
if (is.na(act[i,1])) {
act[i, 1] <- naSub(i)
}
}
head(act)
naSub <- function(n) {
int <- act[n, "interval"]
meanSteps <- stepsByInterval[int, "avg.steps"]
return meanSteps
}
naSub <- function(n) {
int <- act[n, "interval"]
meanSteps <- stepsByInterval[int, 2]
return meanSteps
}
acti[1, "interval"]
act[1, "interval"]
stepsByInterval[act[1, "interval"], 2]
stepsByInterval[0, 2]
head(stepsByInterval)
class(stepsByInterval$interval)
class(stepsByInterval$avg.steps)
stepsByInterval[1,1]
stepsByInterval[1,2]
?gsub
?grep
grep(15, stepsByInterval[, 1])
grep(^15$, stepsByInterval[, 1])
grep(15$, stepsByInterval[, 1])
grep("^15$", stepsByInterval[, 1])
pattern <- paste("\"", "^", int, "$", "\"", sep="")
int <- act[1, "interval"]
int
head(act)
pattern <- paste("\"", "^", int, "$", "\"", sep="")
pattern
pattern <- paste(""", "^", int, "$", """, sep="")
pattern <- paste("\\"", "^", int, "$", "\\"", sep="")
pattern <- paste('"', "^", int, "$", '"', sep="")
pattern
pattern1 <- paste('"', "^", int, "$", '"', sep="")
pattern1
grep(pattern, stepsByInterval[, 1])
grep(pattern, stepsByInterval)
pattern1 <- paste('\"', "^", int, "$", '\"', sep="")
pattern1
pattern <- paste("^", int, "$", sep="")
pattern
stepsByInterval[pattern,1]
grep(pattern, stepsByInterval)
grep(pattern, stepsByInterval[,1])
naSub <- function(n) {
## store target interval value in int
int <- act[n, "interval"]
## construct a pattern that contains only the interval value
pattern <- paste("^", int, "$", sep="")
## search the interval value in stepsByInterval data.frame
rowNum <- grep(pattern, stepsByInterval[, 1])
## return the mean steps based on the target interval value
stepsByInterval[rowNum, 2]
}
naSub(1)
naSub(2)
head(act)
for (i in 1:nrow(act)) {
if (is.na(act[i,1])) {
act[i, 1] <- naSub(i)
}
}
head(act)
act <- read.csv("activity.csv")
head(act)
## loop thru all the values in the original dataset, and run naSub
## function if an NA is found
actNew <- data.frame()
for (i in 1:nrow(act)) {
if (is.na(act[i,1])) {
actNew[i, 1] <- naSub(i)
}
}
head(actNew)
head(act)
actNew[, 2] <- act[, 2]
actNew[, 3] <- act[, 3]
head(actNew)
names(actNew) <- names(act)
head(actNew)
is.na(actNew)
head(actNew)
ncol(actnEW)
ncol(actNew)
class(actNew[,1])
is.na(actNew[,1])
actNew[295,]
nrow(act)
is.na(act[295,1])
act[295,1]
act[295,2]
act[295,3]
class(act)
act[295,]
nrow(actNew)
nrow(act)
actNew <- data.frame()
for (i in 1:nrow(act)) {
if (is.na(act[i,1])) {
actNew[i, 1] <- naSub(i)
}
else {
actNew[i, 1] <- act[i, 1]
}
}
## pass the other two columns from the original dataset to the new one
actNew[, 2] <- act[, 2]
actNew[, 3] <- act[, 3]
names(actNew) <- names(act)
head(actNew)
```
is.na(actNew)
sum(is.na(actNew))
```{r histogram, fig.height=4, fig.width=6}
stepsByDateNew <- tapply(actNew$steps, actNew$date, sum)
hist(stepsByDateNew, xlab="Total Steps per Day", main="Histogram of Total Steps by Date")
stepsByDate
stepsByDateNew
mean(stepsByDateNew)
```{r}
stepsMeanNew <- mean(stepsByDateNew)
stepsMeanNew <- prettyNum(stepsMeanNew, big.mark=",")
print(stepsMeanNew)
stepsMedianNew <- median(stepsByDateNew)
stepsMedianNew <- prettyNum(stepsMedianNew, big.mark=",")
print(stepsMedianNew)
```
- The mean of total number of steps taken per day is **`r stepsMeanNew`**.
- The median of total number of steps taken per day is **`r stepsMedianNew`**.
head(actNEW)
head(actNew)
weekday(actNew[1,2])
weekdays(actNew[1,2])
?as.date
?as.Date
actNew$date <- as.Date(actNew$date)
class(actNew$date)
weekdays(actNew[1,])
weekdays(actNew[1,2])
weekends(actNew[1,2])
?weekend
?weekdays
weekdays(actNew[1,2], abbreviate=TRUE)
??weekend
actNew[1,3]
actNew[1,4]
actNew[1, 4] <- "TEST"
head(actNew)
cname(actNew[,4])
?colname
?colnames
colnames(actNew[,4])
colnames(actNew[,3])
colnames(actNew)
colnames(actNew)[4]
actNew$date <- as.Date(actNew$date)
for (i in 1:nrow(actNew)) {
if (weekdays(actNew[i,2]) == "Sat" | weekdays(actNew[i,2]) == "Sun") {
actNew[i, 4] <- "weekend"
}
else {
actNew[i, 4] <- "weekday"
}
}
head(actNew)
head(actNew)
colnames(actNew)[4] <- "day"
head(actNew)
meanNew <- tapply(actNew$steps, actNew$interval, mean)
head(meanNew)
split(actNew, actNew$day)
head(split(actNew, actNew$day))
head(split(actNew, actNew$day)[1])
length(split(actNew, actNew$day))
summary(actN)
summary(actNew)
summary(actNew$day)
?level
table(actNew$day)
weekdays(actNew[1,2])
weekdays(actNew[1,2], abbreviation=TRUE)
?weekdays
weekdays(actNew[1,2], abbreviate=TRUE)
actNew$date <- as.Date(actNew$date)
for (i in 1:nrow(actNew)) {
if (weekdays(actNew[i,2], abbreviate=TRUE) == "Sat" | weekdays(actNew[i,2]) == "Sun") {
actNew[i, 4] <- "weekend"
}
else {
actNew[i, 4] <- "weekday"
}
}
colnames(actNew)[4] <- "day"
head(actNew)
table(actNew$day)
split(actNew, actNew$day)
length(split(actNew, actNew$day))
split <- split(actNew, actNew$day)
?lapply
?sapply
sapply(split, tapply(actNew$steps, actNew$interval, mean))
?sapply
sapply(split, function(x) tapply(x$steps, x$interval,mean))
head(sapply(split, function(x) tapply(x$steps, x$interval,mean)))
head(sapply(split, function(x) tapply(x$steps, x$interval,mean)))
weekAct <- sapply(split, function(x) tapply(x$steps, x$interval,mean))
ncol(weekAct)
names(weekAct)
?colnames
colnames(weekAct)
class(weekAct)
weekAct <- data.frame(weekAct)
head(weekAct)
class(weekAct[,1])
class(weekAct[,2])
names(weekAct)
data.frame(interval=names(weekAct)[1], weekday=weekAct$weekday, weekend=weekAct$weekend)
head(data.frame(interval=names(weekAct)[1], weekday=weekAct$weekday, weekend=weekAct$weekend))
rnames(weekAct)
rownames(weekAct)
head(rownames(weekAct))
head(data.frame(interval=rownames(weekAct), weekday=weekAct$weekday, weekend=weekAct$weekend))
weekAct <- data.frame(interval=rownames(weekAct), weekday=weekAct$weekday, weekend=weekAct$weekend)
head(weekAct)
class(weekAct$interval)
weekAct$interval <- as.numeric(as.character(weekAct$interval))
class(weekAct$interval)
head(weekAct)
split <- split(actNew, actNew$day)
## apply tapply invidiually to each group, generate a new data.frame
weekAct <- sapply(split, function(x) tapply(x$steps, x$interval,mean))
weekAct <- data.frame(weekAct)
head(weekAct)
t(weekAct)
weekAct <- data.frame(weekAct)
t(weekAct)
head(t(weekAct))
class(weekAct)
head(weekAct)
weekAct <- data.frame(interval=rownames(weekAct), weekday=weekAct$weekday, weekend=weekAct$weekend)
weekAct$interval <- as.numeric(as.character(weekAct$interval))
head(weekAct)
weekday <- weekAct[, c(1,2)]
head(weekday)
weekday[,3] <- "weekday"
head(weekday)
names(weekday) <- c("interval", "steps", "day")
head(weekday)
View(actNew)
weekend <- weekAct[, c(1,3)]
weekend[,3] <- "weekend"
names(weekend) <- c("interval", "steps", "day")
head(weekend)
actNew <- rbind(weekday, weekend)
head(actNew)
table(actNew$day)
head(weekAct)
head(actNew)
meanStepsDay <- rbind(weekday, weekend)
head(meanStepsDay)
ggplot(meanStepsDay, aes(interval, steps)) + geom_point() + facet_grid(day ~ .)
library(ggplot)
install.packages("ggplot")
install.packages("ggplot1")
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot1)
library(ggplot)
library(ggplot2)
ggplot(meanStepsDay, aes(interval, steps)) + geom_point() + facet_grid(day ~ .)
ggplot(meanStepsDay, aes(interval, steps)) + geom_line() + facet_grid(day ~ .)
ggplot(meanStepsDay, aes(interval, steps)) + geom_line(size=2, alpha=1/2) + facet_grid(day ~ .)
ggplot(meanStepsDay, aes(interval, steps)) + geom_line(size=1, alpha=1/2) + facet_grid(day ~ .)
ggplot(meanStepsDay, aes(interval, steps)) + geom_line(size=1, alpha=1/2, col=rgb(255,12,18)) + facet_grid(day ~ .)
ggplot(meanStepsDay, aes(interval, steps)) + geom_line(size=1, alpha=1/2, col=rgb(0.255,.12,.18)) + facet_grid(day ~ .)
ggplot(meanStepsDay, aes(interval, steps)) + geom_line(size=1, alpha=1/2, col=rgb(0.255,.12,.18)) + facet_grid(day ~ .) + title("Steps by Day of the Week")
ggplot(meanStepsDay, aes(interval, steps)) + geom_line(size=1, alpha=1/2, col=rgb(0.255,.12,.18)) + facet_grid(day ~ .) + labs(title = "Steps by Day of the Week")
## consturcting the plot with ggplot
